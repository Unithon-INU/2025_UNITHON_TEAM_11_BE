name: Fring Server CI & CD

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build jar and Push Docker Image at Docker hub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application-prod.yml
        env:
          spring.datasource.url: ${{ secrets.MYSQL_URL }}
          spring.datasource.username: ${{ secrets.MYSQL_USERNAME }}
          spring.datasource.password: ${{ secrets.MYSQL_PASSWORD }}
          spring.data.redis.host: ${{ secrets.REDIS_HOST }}
          spring.jwt.secret: ${{ secrets.JWT_SECRET }}
          spring.mail.username: ${{ secrets.MAIL_USERNAME }}
          spring.mail.password: ${{ secrets.MAIL_PASSWORD }}
          cloud.aws.s3.credentials.accessKey: ${{ secrets.S3_ACCESSKEY }}
          cloud.aws.s3.credentials.secretKey: ${{ secrets.S3_SECRETKEY }}
          cloud.aws.s3.bucket: ${{ secrets.S3_BUCKET }}

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test -i --no-daemon -Dspring.profiles.active=prod

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/fring-server:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/fring-server:latest

  deploy:
    name: Deploy to remote EC2 Server
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy docker compose file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: ${{ secrets.AWS_EC2_PORT }}
          source: "docker-compose.yml"
          target: "/home/ubuntu"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: ${{ secrets.AWS_EC2_PORT }}
          script: |
            cd /home/ubuntu
            docker pull ${{ secrets.DOCKER_USERNAME }}/fring-server:latest
            
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
            echo "S3_ACCESSKEY=${{ secrets.S3_ACCESSKEY }}" >> .env
            echo "S3_SECRETKEY=${{ secrets.S3_SECRETKEY }}" >> .env
            echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> .env

            if [ "$(docker ps -aq -f name=Fring-server)" ]; then
              docker stop Fring-server
              docker rm Fring-server
            fi

            if [ "$(docker ps -aq -f name=Fring-redis)" ]; then
              docker stop Fring-redis
              docker rm Fring-redis
            fi

            docker-compose up -d
            docker image prune -f